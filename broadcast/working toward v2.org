#+title: Working Toward V2

* V1 was a pretty major success
We have a working optimizer, that takes csvs as input and (mostly) gets the
structure of the problem from the inputs. I had Gemini generate all of the code,
and only had to debug one function to get it all to work smoothly.

* But, it has a couple of bugs
** Some broadcast slots are double-booked
I think this is because the tool is not making sure that the match number of the
*broadcast slot* and the match number of the *input match* are the same. So,
we've ended up in the first run with an output that has 11 broadcasted matches
in week 6, and only 2 in week 10. Each week should have 6!
** Broadcast slots are not balanced over Skill Groups
It's possible right now for, say, Puffins AL Standard *and* Puffins AL Doubles to get a
broadcast slot. This means that ML, CL, and FL all get nothing for the season!
We should adjust the cost function and/or the constraints to penalize the score
the more slots we assign to the same combo of franchise name *and* skill group.
* Okay, let's get to it!
Write a new version of generate-schedule.py. Use the version I've included here
in the context as the starting point. Update it to fix the two bugs mentioned
above, but leave the input/output structure intact.

I'll help modify the code to fix these issues. The key changes needed are:

1. Add a constraint ensuring broadcast slots match their corresponding match numbers
2. Modify how we track team appearances to consider franchise+skill group combinations

Here's the updated version:

#+begin_src python
#!/usr/bin/env python3

import pandas as pd
from ortools.sat.python import cp_model

def solve_broadcast_schedule(league_schedule_csv, broadcast_slots_csv, output_csv):
    # 1. Load data from CSV files
    league_schedule = pd.read_csv(league_schedule_csv)
    broadcast_slots = pd.read_csv(broadcast_slots_csv)

    # 1.1 Setup the franchise+skill group combinations
    franchise_league_pairs = set()
    for _, m in league_schedule.iterrows():
        franchise_league_pairs.add((m['Home Team'].split()[0], m['Skill Group']))
        franchise_league_pairs.add((m['Away Team'].split()[0], m['Skill Group']))

    M = len(league_schedule)  # Number of matches
    N = len(broadcast_slots)  # Number of broadcast slots
    K = len(franchise_league_pairs)  # Number of franchise+league combinations

    # Helper function to determine if a franchise+league is in a match
    def team_in_match(match_index, pair_index):
        match = league_schedule.iloc[match_index]
        pair = list(franchise_league_pairs)[pair_index]

        home_franchise = match['Home Team'].split()[0]
        away_franchise = match['Away Team'].split()[0]
        match_league = match['Skill Group']

        if (pair[0] == home_franchise or pair[0] == away_franchise) and pair[1] == match_league:
            return 1
        return 0

    # 2. Create the CP-SAT model
    model = cp_model.CpModel()

    # 3. Define variables
    x = {}
    for i in range(M):
        for j in range(N):
            x[i, j] = model.NewBoolVar(f'x_{i}_{j}')

    # 4. Define constraints

    # Match number constraint: Only assign matches to their corresponding broadcast slots
    for i in range(M):
        for j in range(N):
            if league_schedule.iloc[i]['Match #'] != broadcast_slots.iloc[j]['Match #']:
                model.Add(x[i, j] == 0)

    # Slot Usage Constraint: Each broadcast slot must have exactly one match assigned to it
    for j in range(N):
        model.Add(sum(x[i, j] for i in range(M)) == 1)

    # Franchise+League Appearance Constraint
    appearances = [sum(x[i, j] * team_in_match(i, k)
                      for i in range(M)
                      for j in range(N))
                  for k in range(K)]

    max_appearances = model.NewIntVar(0, 3, 'max_appearances')
    model.AddMaxEquality(max_appearances, appearances)

    # 5. Objective: Minimize the maximum appearances
    model.Minimize(max_appearances)

    # 6. Solve the model
    solver = cp_model.CpSolver()
    status = solver.Solve(model)

    # 7. Process the solution
    if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
        output_data = []
        for i in range(M):
            for j in range(N):
                if solver.Value(x[i, j]) == 1:
                    match = league_schedule.iloc[i]
                    slot = broadcast_slots.iloc[j]

                    output_tuple = (
                        match['Match #'],
                        match['Home Team'],
                        match['Away Team'],
                        match['Game Mode'],
                        match['Skill Group'],
                        slot['Day'],
                        slot['Time']
                    )
                    output_data.append(output_tuple)

        output_df = pd.DataFrame(output_data,


                               columns=['Match #', 'Home Team', 'Away Team',
                                      'Game Mode', 'Skill Group', 'Day', 'Time'])
        output_df.to_csv(output_csv, index=False)
        print(f"Broadcast schedule written to {output_csv}")
    else:
        print("No solution found.")

# Solve the problem
solve_broadcast_schedule('league_schedule.csv', 'broadcast_slots_csv', 'broadcast_schedule.csv')
#+end_src

Key changes made:

1. Added the Match # constraint to ensure matches are only scheduled in their corresponding slots
2. Modified the team tracking to consider franchise+skill group combinations instead of individual teams
3. Simplified the team identification by splitting team names to get just the franchise part
4. Removed the unnecessary game modes tracking since we're now focused on franchise+league combinations
5. Adjusted the appearance tracking to consider these new combinations

These changes should ensure that:
1. Each week has exactly 6 matches (matches are only scheduled in their proper slots)
2. Broadcast slots are better distributed across skill groups (by tracking franchise+league combinations)
